# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Check And Compile

on:
  push:
  pull_request:

jobs:
  pre_commit_check:
    name: "Pre-commit Check"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-2022, macOS-15]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Install Clang Linux
      if: runner.os == 'Linux'
      run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        sudo apt update
        sudo apt -y remove clang-18 llvm-18 llvm-18-dev llvm-18-linker-tools llvm-18-runtime clang-format-18
        sudo apt -y install clang-19 lldb-19 lld-19 clang-format-19 libudev-dev
        sudo ln -sf `which clang-19` /usr/bin/clang
        sudo ln -sf `which clang++-19` /usr/bin/clang++

    - name: Install Clang Windows
      if: runner.os == 'Windows'
      run: |
        choco install llvm --version=19.1.7 --allow-downgrade

    - name: Install Clang macOS
      if: runner.os == 'macOS'
      run: |
        brew install llvm@19

    - name: Pre-commit run
      run: |
        uvx pre-commit run --all


  build:
    runs-on: ${{ matrix.os }}
    # needs: pre_commit_check

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04, windows-2022, macOS-15]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-2022
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: macOS-15
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-2022
            c_compiler: gcc
          - os: ubuntu-24.04
            c_compiler: cl
          - os: macOS-15
            c_compiler: gcc
          - os: macOS-15
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"


    - name: Install Clang Linux
      if: runner.os == 'Linux'
      run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        sudo apt update
        sudo apt -y remove clang-18 llvm-18 llvm-18-dev llvm-18-linker-tools llvm-18-runtime clang-format-18
        sudo apt -y install clang-19 lldb-19 lld-19 clang-format-19 libudev-dev
        sudo ln -sf `which clang-19` /usr/bin/clang
        sudo ln -sf `which clang++-19` /usr/bin/clang++

    - name: Install Clang Windows
      if: runner.os == 'Windows'
      run: |
        choco install llvm --version=19.1.7 --allow-downgrade

    - name: Install Clang macOS
      if: runner.os == 'macOS'
      run: |
        brew install llvm@19

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
