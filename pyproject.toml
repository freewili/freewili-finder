[build-system]
requires = [
  "scikit-build-core >=0.10",
  "nanobind >=2.8.0",
  "typing-extensions >= 4.12.2",
]
build-backend = "scikit_build_core.build"

[project]
name = "pyfwfinder"
version = "0.3.0"
description = "An example minimal project that compiles bindings using nanobind and scikit-build"
readme = "README.md"
requires-python = ">=3.8"
authors = [{ name = "David Rebbe", email = "drebbe@intrepidcs.com" }]
classifiers = ["License :: OSI Approved :: MIT License"]

[project.urls]
Homepage = "https://github.com/freewili/freewili-finder"


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "build-system.requires"
cmake.args = [
  "-DFW_FINDER_ENABLE_BINDINGS_PYTHON=ON",
  "-DFW_FINDER_BUILD_TESTS=OFF",
  "-DFW_BUILD_C_API=OFF",
  "-DFW_BUILD_EXAMPLES=OFF",
]
wheel.packages = ["pyfwfinder"]

# # Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

# Build stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"

[tool.cibuildwheel]
# Necessary to see build output from the actual compilation
build-verbosity = 1
before-build = "python -m pip install wheel typing-extensions"
manylinux-x86_64-image = "quay.io/pypa/manylinux_2_34_x86_64"
manylinux-aarch64-image = "quay.io/pypa/manylinux_2_34_aarch64:2025.04.05-1"
skip = ["pp* *-manylinux_i686 *-musllinux_*"]

# Run pytest to ensure that the package was correctly built
test-command = "pytest {project}/bindings/python/tests -v"
test-requires = "pytest"

# Don't test Python 3.8 wheels on macOS/arm64
test-skip = "cp38-macosx_*:arm64"

[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET = "10.15" # Needed for full C++23 support

[tool.cibuildwheel.macos]
archs = ["universal2"]
before-build = ["brew install llvm@19"]

[tool.cibuildwheel.linux]
before-build = [
  "dnf install -y cmake clang systemd-devel",
  "pip install typing-extensions",
]
archs = ["x86_64"] #, "aarch64"]

[tool.cibuildwheel.windows]
before-build = ["choco install llvm --version=19.1.7 --allow-downgrade", "pip install delvewheel"]
# repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
archs = ["AMD64"] #, "ARM64"]
